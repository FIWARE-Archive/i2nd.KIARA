 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file ExceptionsTestServant.java
 * This file contains the servant processing implementation code. It parses the service executed and calls the corresponding method.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */
 
 
package org.fiware.kiara.exceptions;

import org.fiware.kiara.serialization.Serializer;
import org.fiware.kiara.serialization.impl.CDRSerializer;
import org.fiware.kiara.serialization.impl.SerializerImpl;
import org.fiware.kiara.server.Servant;
import org.fiware.kiara.transport.Transport;
import org.fiware.kiara.transport.impl.TransportImpl;
import org.fiware.kiara.transport.impl.TransportMessage;

import java.nio.ByteBuffer;

/**
 * Abstract class used to process the incoming remote calls. 
 *
 * @author Kiaragen tool.
 *
 */
public abstract class ExceptionsServant implements Servant, Exceptions
{

	public String getServiceName() {
		return "ExceptionsTest";
	}
	

	private int divide_required_size() {
		int op_size = 0;
		
		op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
		op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // Error indicator code
		op_size += 4 + CDRSerializer.alignment(op_size, 4); // Return type
		
		int currentSize = 0, maxSize = 0;

		currentSize += DividedByZeroException.getMaxCdrSerializedSize(currentSize);
		if (currentSize > maxSize) {
			maxSize = currentSize;
		}
		currentSize = 0;

		return op_size + maxSize;
	}

	private int function_required_size() {
		int op_size = 0;
		
		op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
		op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // Error indicator code
		op_size += 4 + CDRSerializer.alignment(op_size, 4); // Return type
		
		int currentSize = 0, maxSize = 0;

		currentSize += FirstException.getMaxCdrSerializedSize(currentSize);
		if (currentSize > maxSize) {
			maxSize = currentSize;
		}
		currentSize = 0;

		currentSize += SecondException.getMaxCdrSerializedSize(currentSize);
		if (currentSize > maxSize) {
			maxSize = currentSize;
		}
		currentSize = 0;

		return op_size + maxSize;
	}
	
	public TransportMessage process(Serializer ser, Transport transport, TransportMessage message, Object messageId) {
	
		SerializerImpl serImpl;
        TransportImpl transportImpl;
        
        if (ser instanceof SerializerImpl && transport instanceof TransportImpl) {
            serImpl = (SerializerImpl) ser;
            transportImpl = (TransportImpl) transport;
        } else {
            return null; // TODO Raise error
        }
        
		String operation = serImpl.deserializeOperation(message);
		

		if (operation.equals("divide")) {
			float n1 = serImpl.deserializeFloat32(message, "");
			float n2 = serImpl.deserializeFloat32(message, "");
			
			ByteBuffer retBuffer = ByteBuffer.allocate(divide_required_size());
		    TransportMessage retMsg = transportImpl.createTransportMessage(null);
		 	retMsg.setPayload(retBuffer);
		 	serImpl.serializeMessageId(retMsg, messageId);
			
			try {
				float ret = divide (n1, n2);
				// Serialize return code (0 = OK)
				serImpl.serializeUI32(retMsg, "", 0);
				// Serialize return type
				serImpl.serializeFloat32(retMsg, "", ret);
			} 
			catch(DividedByZeroException ex_DividedByZeroException) {
				ex_DividedByZeroException.printStackTrace();
				// Serialize return code (non-zero error code)
				serImpl.serializeUI32(retMsg, "", 0xC0E611C3);
				// Serialize exception name
				serImpl.serializeString(retMsg, "", "DividedByZeroException");
				// Serialize exception data
				ex_DividedByZeroException.serialize(serImpl, retMsg, "");
			}
			
			retMsg.getPayload().flip();
			return retMsg;
			
			
		} 

		if (operation.equals("function")) {
			
			ByteBuffer retBuffer = ByteBuffer.allocate(function_required_size());
		    TransportMessage retMsg = transportImpl.createTransportMessage(null);
		 	retMsg.setPayload(retBuffer);
		 	serImpl.serializeMessageId(retMsg, messageId);
			
			try {
				int ret = function ();
				// Serialize return code (0 = OK)
				serImpl.serializeUI32(retMsg, "", 0);
				// Serialize return type
				serImpl.serializeI32(retMsg, "", ret);
			} 
			catch(FirstException ex_ExceptionOne) {
				ex_ExceptionOne.printStackTrace();
				// Serialize return code (non-zero error code)
				serImpl.serializeUI32(retMsg, "", 0x5849D65A);
				// Serialize exception name
				serImpl.serializeString(retMsg, "", "ExceptionOne");
				// Serialize exception data
				ex_ExceptionOne.serialize(serImpl, retMsg, "");
			}

			catch(SecondException ex_ExceptionTwo) {
				ex_ExceptionTwo.printStackTrace();
				// Serialize return code (non-zero error code)
				serImpl.serializeUI32(retMsg, "", 0xC56C7E5F);
				// Serialize exception name
				serImpl.serializeString(retMsg, "", "ExceptionTwo");
				// Serialize exception data
				ex_ExceptionTwo.serialize(serImpl, retMsg, "");
			}
			
			retMsg.getPayload().flip();
			return retMsg;
			
			
		} 
		
		return null;
		
	}
	



}
