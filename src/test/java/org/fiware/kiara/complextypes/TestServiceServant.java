 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file TestServiceServant.java
 * This file contains the servant processing implementation code. It parses the service executed and calls the corresponding method.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */
 
 
package org.fiware.kiara.complextypes;

import org.fiware.kiara.serialization.Serializer;
import org.fiware.kiara.serialization.impl.CDRSerializer;
import org.fiware.kiara.serialization.impl.SerializerImpl;
import org.fiware.kiara.server.Servant;
import org.fiware.kiara.transport.Transport;
import org.fiware.kiara.transport.impl.TransportImpl;
import org.fiware.kiara.transport.impl.TransportMessage;

import java.nio.ByteBuffer;

/**
 * Abstract class used to process the incoming remote calls. 
 *
 * @author Kiaragen tool.
 *
 */
public abstract class TestServiceServant implements Servant, TestService
{

        public String getServiceName() {
                return "TestService";
        }
        

        private int return_param_func_required_size() {
                int op_size = 0;
                
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // Error indicator code
                op_size += MyStruct.getMaxCdrSerializedSize(op_size); // Return type
                
                return op_size;
        }

        private int only_param_func_required_size() {
                int op_size = 0;
                
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // Error indicator code
         // Return type
                
                return op_size;
        }

        private int only_return_func_required_size() {
                int op_size = 0;
                
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // Error indicator code
                op_size += MyStruct.getMaxCdrSerializedSize(op_size); // Return type
                
                return op_size;
        }

        private int oneway_return_param_func_required_size() {
                int op_size = 0;
                
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // Error indicator code
         // Return type
                
                return op_size;
        }

        private int oneway_only_param_func_required_size() {
                int op_size = 0;
                
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // Error indicator code
         // Return type
                
                return op_size;
        }

        private int oneway_only_return_func_required_size() {
                int op_size = 0;
                
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
                op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // Error indicator code
         // Return type
                
                return op_size;
        }
        
        public TransportMessage process(Serializer ser, Transport transport, TransportMessage message, Object messageId) {
        
                SerializerImpl serImpl;
        TransportImpl transportImpl;
        
        if (ser instanceof SerializerImpl && transport instanceof TransportImpl) {
            serImpl = (SerializerImpl) ser;
            transportImpl = (TransportImpl) transport;
        } else {
            return null; // TODO Raise error
        }
        
                String operation = serImpl.deserializeOperation(message);
                

                if (operation.equals("return_param_func")) {
                        MyStruct param1 = null;
                        try {
                                param1 = serImpl.deserialize(message, "", MyStruct.class);
                        } catch (InstantiationException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        } catch (IllegalAccessException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                        int param2 = serImpl.deserializeI32(message, "");
                        
                        ByteBuffer retBuffer = ByteBuffer.allocate(return_param_func_required_size());
                    TransportMessage retMsg = transportImpl.createTransportMessage(null);
                        retMsg.setPayload(retBuffer);
                        serImpl.serializeMessageId(retMsg, messageId);
                        
                                MyStruct ret = return_param_func (param1, param2);
                                // Serialize return code (0 = OK)
                                serImpl.serializeUI32(retMsg, "", 0);
                                // Serialize return type
                                serImpl.serialize(retMsg, "", ret);

                        
                        retMsg.getPayload().flip();
                        return retMsg;
                        
                        
                } 

                if (operation.equals("only_param_func")) {
                        MyStruct param1 = null;
                        try {
                                param1 = serImpl.deserialize(message, "", MyStruct.class);
                        } catch (InstantiationException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        } catch (IllegalAccessException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                        
                        ByteBuffer retBuffer = ByteBuffer.allocate(only_param_func_required_size());
                    TransportMessage retMsg = transportImpl.createTransportMessage(null);
                        retMsg.setPayload(retBuffer);
                        serImpl.serializeMessageId(retMsg, messageId);
                        
                                only_param_func (param1);
                                // Serialize return code (0 = OK)
                                serImpl.serializeUI32(retMsg, "", 0);

                        
                        retMsg.getPayload().flip();
                        return retMsg;
                        
                        
                } 

                if (operation.equals("only_return_func")) {
                        
                        ByteBuffer retBuffer = ByteBuffer.allocate(only_return_func_required_size());
                    TransportMessage retMsg = transportImpl.createTransportMessage(null);
                        retMsg.setPayload(retBuffer);
                        serImpl.serializeMessageId(retMsg, messageId);
                        
                                MyStruct ret = only_return_func ();
                                // Serialize return code (0 = OK)
                                serImpl.serializeUI32(retMsg, "", 0);
                                // Serialize return type
                                serImpl.serialize(retMsg, "", ret);

                        
                        retMsg.getPayload().flip();
                        return retMsg;
                        
                        
                } 

                if (operation.equals("oneway_return_param_func")) {
                        MyStruct param1 = null;
                        try {
                                param1 = serImpl.deserialize(message, "", MyStruct.class);
                        } catch (InstantiationException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        } catch (IllegalAccessException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                        int param2 = serImpl.deserializeI32(message, "");
                        
                        ByteBuffer retBuffer = ByteBuffer.allocate(oneway_return_param_func_required_size());
                    TransportMessage retMsg = transportImpl.createTransportMessage(null);
                        retMsg.setPayload(retBuffer);
                        serImpl.serializeMessageId(retMsg, messageId);
                        
                                oneway_return_param_func (param1, param2);
                                // Serialize return code (0 = OK)
                                serImpl.serializeUI32(retMsg, "", 0);

                        
                        retMsg.getPayload().flip();
                        return retMsg;
                        
                        
                } 

                if (operation.equals("oneway_only_param_func")) {
                        MyStruct param1 = null;
                        try {
                                param1 = serImpl.deserialize(message, "", MyStruct.class);
                        } catch (InstantiationException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        } catch (IllegalAccessException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                        }
                        
                        ByteBuffer retBuffer = ByteBuffer.allocate(oneway_only_param_func_required_size());
                    TransportMessage retMsg = transportImpl.createTransportMessage(null);
                        retMsg.setPayload(retBuffer);
                        serImpl.serializeMessageId(retMsg, messageId);
                        
                                oneway_only_param_func (param1);
                                // Serialize return code (0 = OK)
                                serImpl.serializeUI32(retMsg, "", 0);

                        
                        retMsg.getPayload().flip();
                        return retMsg;
                        
                        
                } 

                if (operation.equals("oneway_only_return_func")) {
                        
                        ByteBuffer retBuffer = ByteBuffer.allocate(oneway_only_return_func_required_size());
                    TransportMessage retMsg = transportImpl.createTransportMessage(null);
                        retMsg.setPayload(retBuffer);
                        serImpl.serializeMessageId(retMsg, messageId);
                        
                                oneway_only_return_func ();
                                // Serialize return code (0 = OK)
                                serImpl.serializeUI32(retMsg, "", 0);

                        
                        retMsg.getPayload().flip();
                        return retMsg;
                        
                        
                } 
                
                return null;
                
        }
        







}
