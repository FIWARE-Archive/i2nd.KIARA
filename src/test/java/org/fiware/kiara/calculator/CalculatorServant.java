 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file CalculatorServant.java
 * This file contains the servant processing implementation code. It parses the service executed and calls the corresponding method.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */


package org.fiware.kiara.calculator;

import org.fiware.kiara.serialization.Serializer;
import org.fiware.kiara.serialization.impl.CDRSerializer;
import org.fiware.kiara.serialization.impl.SerializerImpl;
import org.fiware.kiara.server.Servant;
import org.fiware.kiara.transport.Transport;
import org.fiware.kiara.transport.impl.TransportImpl;
import org.fiware.kiara.transport.impl.TransportMessage;

import java.nio.ByteBuffer;

/**
 * Abstract class used to process the incoming remote calls. 
 *
 * @author Kiaragen tool.
 *
 */
public abstract class CalculatorServant implements Servant, Calculator
{

	public String getServiceName() {
		return "Calculator";
	}
	

	private int add_required_size() {
		int op_size = 0;
		
		op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
		op_size += 4 + CDRSerializer.alignment(op_size, 4); // Return type
		
		return op_size;
	}

	private int subtract_required_size() {
		int op_size = 0;
		
		op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
		op_size += 4 + CDRSerializer.alignment(op_size, 4); // Return type
		
		return op_size;
	}
	
	public TransportMessage process(Serializer ser, Transport transport, TransportMessage message, Object messageId) {
	
		SerializerImpl serImpl;
        TransportImpl transportImpl;
        
        if (ser instanceof SerializerImpl && transport instanceof TransportImpl) {
            serImpl = (SerializerImpl) ser;
            transportImpl = (TransportImpl) transport;
        } else {
            return null; // TODO Raise error
        }
        
		String operation = serImpl.deserializeOperation(message);
		

		if (operation.equals("add")) {
			int n1 = serImpl.deserializeI32(message, "");
			int n2 = serImpl.deserializeI32(message, "");
			
			int ret = add (n1, n2);
			
			ByteBuffer retBuffer = ByteBuffer.allocate(add_required_size());
		    TransportMessage retMsg = transportImpl.createTransportMessage(null);
		 	retMsg.setPayload(retBuffer);
		 	serImpl.serializeMessageId(retMsg, messageId);
			serImpl.serializeI32(retMsg, "", ret);
			retMsg.getPayload().flip();
			return retMsg;
		} 

		if (operation.equals("subtract")) {
			int n1 = serImpl.deserializeI32(message, "");
			int n2 = serImpl.deserializeI32(message, "");
			
			int ret = subtract (n1, n2);
			
			ByteBuffer retBuffer = ByteBuffer.allocate(subtract_required_size());
		    TransportMessage retMsg = transportImpl.createTransportMessage(null);
		 	retMsg.setPayload(retBuffer);
		 	serImpl.serializeMessageId(retMsg, messageId);
			serImpl.serializeI32(retMsg, "", ret);
			retMsg.getPayload().flip();
			return retMsg;
		} 
		
		return null;
		
	}
	



}
