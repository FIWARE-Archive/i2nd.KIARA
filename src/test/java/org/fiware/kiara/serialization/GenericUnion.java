 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file GenericUnion.java
 * This file contains the class representing a user defined union.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */
 
 
package org.fiware.kiara.serialization;

import org.fiware.kiara.serialization.impl.Serializable;
import org.fiware.kiara.serialization.impl.SerializerImpl;
import org.fiware.kiara.serialization.impl.CDRSerializer;
import org.fiware.kiara.transport.impl.TransportMessage;

import java.util.List;
import java.util.ArrayList;
import java.util.Objects;

public class GenericUnion implements Serializable {
	
	private int m_d;
	
	private long att1;
	private float att2;
	private java.lang.String att3;
	
	public GenericUnion() {
		this.att1 = 0;
		this.att2 = (float) 0.0;
		this.att3 = "";
	}
	
	public void _d(int discriminator) {
		this.m_d = discriminator;
	}
	
	/*
	 * This method serializes the union GenericUnion.
	 *
	 * @see org.fiware.kiara.serialization.impl.Serializable#serialize(org.fiware.kiara.serialization.impl.SerializerImpl, org.fiware.kiara.transport.impl.TransportMessage, java.lang.String)
	 */
	public void serialize(SerializerImpl impl, TransportMessage message, String name) {
		impl.serializeI32(message, name, this.m_d);

		switch(this.m_d) {

		case 0:
		case 1:
			impl.serializeI64(message, name, this.att1);
			break;

		case 2:
			impl.serializeFloat32(message, name, this.att2);
			break;

		default:
			impl.serializeString(message, name, this.att3);
			break;
		}

	}

	/*
	 * This method deserializes the GenericUnion.
	 *
	 * @see org.fiware.kiara.serialization.impl.Serializable#deserialize(org.fiware.kiara.serialization.impl.SerializerImpl, org.fiware.kiara.transport.impl.TransportMessage, java.lang.String)
	 */
	public void deserialize(SerializerImpl impl, TransportMessage message, String name) {
		this.m_d = impl.deserializeI32(message, name);
		
		switch(this.m_d) {

		case 0:
		case 1:
			this.att1 = impl.deserializeI64(message, name);		
			break;

		case 2:
			this.att2 = impl.deserializeFloat32(message, name);		
			break;


		default:
			this.att3 = impl.deserializeString(message, name);		
			break;	
		}

	}


	

	/*
	 * Method to get the attribute att1.
	 */
	public long getAtt1() { 
		boolean canDoIt = false;
		switch(this.m_d) {
			case 0:
			case 1:
				canDoIt=true;
				break;
			default:
				break;
		}
		
		if (!canDoIt) {
			throw new UnsupportedOperationException("Invalid union value");
		}
		return this.att1;
	}

	/*
	 * Method to set the attribute att1.
	 */
	public void setAtt1(long att1) {
		boolean canDoIt = false;
		switch(this.m_d) {
			case 0:
			case 1:
				canDoIt=true;
				break;
			default:
				break;
		}
		
		if (!canDoIt) {
			throw new UnsupportedOperationException("Invalid union value");
		}
		this.att1 = att1;
	}

	/*
	 * Method to get the attribute att2.
	 */
	public float getAtt2() { 
		boolean canDoIt = false;
		switch(this.m_d) {
			case 2:
				canDoIt=true;
				break;
			default:
				break;
		}
		
		if (!canDoIt) {
			throw new UnsupportedOperationException("Invalid union value");
		}
		return this.att2;
	}

	/*
	 * Method to set the attribute att2.
	 */
	public void setAtt2(float att2) {
		boolean canDoIt = false;
		switch(this.m_d) {
			case 2:
				canDoIt=true;
				break;
			default:
				break;
		}
		
		if (!canDoIt) {
			throw new UnsupportedOperationException("Invalid union value");
		}
		this.att2 = att2;
	}

	/*
	 * Method to get the attribute att3.
	 */
	public java.lang.String getAtt3() { 
		boolean canDoIt = false;
		switch(this.m_d) {
			case 0:
			case 1:
				break;
			case 2:
				break;
			default:
				canDoIt=true;
				break;
		}
		
		if (!canDoIt) {
			throw new UnsupportedOperationException("Invalid union value");
		}
		return this.att3;
	}

	/*
	 * Method to set the attribute att3.
	 */
	public void setAtt3(java.lang.String att3) {
		boolean canDoIt = false;
		switch(this.m_d) {
			case 0:
			case 1:
				break;
			case 2:
				break;
			default:
				canDoIt=true;
				break;
		}
		
		if (!canDoIt) {
			throw new UnsupportedOperationException("Invalid union value");
		}
		this.att3 = att3;
	}
	
	/*
	 *This method calculates the maximum size in CDR for this class.
	 * 
	 * @param current_alignment Integer containing the current position in the buffer.
	 */
	public static int getMaxCdrSerializedSize(int current_alignment)
	{
	    int current_align = current_alignment;
	    int sum = 0;
	    int current_sum = 0;
	    
	    current_align += 4 + CDRSerializer.alignment(current_align, 4);
	            

	    current_sum += 8 + CDRSerializer.alignment(current_sum, 8);
	    if (current_sum > sum) {
	    	sum = current_sum;
	    }
	    current_sum = 0;

	        
	    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);
	    if (current_sum > sum) {
	    	sum = current_sum;
	    }
	    current_sum = 0;

	        
	    current_sum += 4 + CDRSerializer.alignment(current_sum, 4) + 255 + 1;
	    if (current_sum > sum) {
	    	sum = current_sum;
	    }
	    current_sum = 0;

	    return sum + (current_align - current_alignment);
	}
	
	@Override
	public boolean equals(Object another) {
	    if (another instanceof GenericUnion) {
	        GenericUnion union = (GenericUnion) another;
	            switch(this.m_d) {
        	    case 0:
        	    case 1:
        	        return this.att1 == union.att1;
        	    case 2:
        	        return this.att2 == union.att2;
        	    default:
        	        return this.att3.equals(union.att3);
        	    }
	    
	    }
	    
	    return false;
	}
	
}
 