 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file .java
 * This file contains the class representing a user defined structure.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */
package org.fiware.kiara.struct;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import org.fiware.kiara.serialization.impl.BasicSerializers;
import org.fiware.kiara.serialization.impl.BinaryInputStream;
import org.fiware.kiara.serialization.impl.BinaryOutputStream;

import org.fiware.kiara.serialization.impl.Serializable;
import org.fiware.kiara.serialization.impl.SerializerImpl;
import org.fiware.kiara.serialization.impl.CDRSerializer;
import org.fiware.kiara.serialization.impl.ListAsArraySerializer;
import org.fiware.kiara.serialization.impl.ListAsSequenceSerializer;
import org.fiware.kiara.serialization.impl.Serializer;
import org.fiware.kiara.serialization.impl.MapAsMapSerializer;
import org.fiware.kiara.serialization.impl.SetAsSetSerializer;
import org.fiware.kiara.serialization.impl.ObjectSerializer;
import org.fiware.kiara.serialization.impl.EnumSerializer;

/**
 * Class definition for the user defined type MidStruct.
 *
 * @author Kiaragen tool.
 *
 */
public class MidStruct implements Serializable {

    /*
     *	Attributes
     */
    private int midLongAtt;
    private InnerStruct innerStructAtt;

    /*
         *      Attribute Serializers
         */


	/*
     *	Default constructor
     */
    public MidStruct() {
        this.midLongAtt = 0;
        this.innerStructAtt = new InnerStruct();
    }

    /*
     * This method serializes a MidStruct.
     *
	 * @see org.fiware.kiara.serialization.impl.Serializable#serialize(org.fiware.kiara.serialization.impl.SerializerImpl, org.fiware.kiara.serialization.impl.BinaryOutputStream, java.lang.String)
     */
    @Override
    public void serialize(SerializerImpl impl, BinaryOutputStream message, String name) throws IOException {
        impl.serializeI32(message, name, this.midLongAtt);
        impl.serialize(message, name, this.innerStructAtt);
    }

    /*
     * This method deserializes a MidStruct.
     *
	 * @see org.fiware.kiara.serialization.impl.Serializable#deserialize(org.fiware.kiara.serialization.impl.SerializerImpl, org.fiware.kiara.serialization.impl.BinaryInputStream, java.lang.String)
     */
    @Override
    public void deserialize(SerializerImpl impl, BinaryInputStream message, String name) throws IOException {
        this.midLongAtt = impl.deserializeI32(message, name);
        try {
            this.innerStructAtt = impl.deserialize(message, name, InnerStruct.class);
        } catch (InstantiationException | IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    /*
     * @param other An object instance of Object
     */
    @Override
    public boolean equals(Object other) {
        boolean comparison = true;

        if (other instanceof MidStruct) {

            comparison = comparison && (this.midLongAtt == ((MidStruct) other).midLongAtt);

            comparison = comparison && this.innerStructAtt.equals(((MidStruct) other).innerStructAtt);

        }

        return comparison;
    }

    /*
     *This method calculates the maximum size in CDR for this class.
     * 
     * @param current_alignment Integer containing the current position in the buffer.
     */
	public static int getMaxCdrSerializedSize(int current_alignment)
	{
        int current_align = current_alignment;

        current_align += 4 + CDRSerializer.alignment(current_align, 4);

        current_align += InnerStruct.getMaxCdrSerializedSize(current_align);

        return current_align;
    }

    /*
     * Method to get the attribute midLongAtt.
     */
    public int getMidLongAtt() {
        return this.midLongAtt;
    }

    /*
     * Method to set the attribute midLongAtt.
     */
    public void setMidLongAtt(int midLongAtt) {
        this.midLongAtt = midLongAtt;
    }

    /*
     * Method to get the attribute innerStructAtt.
     */
    public InnerStruct getInnerStructAtt() {
        return this.innerStructAtt;
    }

    /*
     * Method to set the attribute innerStructAtt.
     */
    public void setInnerStructAtt(InnerStruct innerStructAtt) {
        this.innerStructAtt = innerStructAtt;
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.midLongAtt, this.innerStructAtt);
    }
}
