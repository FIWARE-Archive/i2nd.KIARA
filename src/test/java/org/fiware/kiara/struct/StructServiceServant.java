 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file StructServiceServant.java
 * This file contains the servant processing implementation code. It parses the service executed and calls the corresponding method.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */


package org.fiware.kiara.struct;

import org.fiware.kiara.serialization.Serializer;
import org.fiware.kiara.serialization.impl.CDRSerializer;
import org.fiware.kiara.serialization.impl.SerializerImpl;
import org.fiware.kiara.server.Servant;
import org.fiware.kiara.transport.Transport;
import org.fiware.kiara.transport.impl.TransportImpl;
import org.fiware.kiara.transport.impl.TransportMessage;

import java.nio.ByteBuffer;

/**
 * Abstract class used to process the incoming remote calls.
 *
 * @author Kiaragen tool.
 *
 */
public abstract class StructServiceServant implements Servant, StructService
{

	public String getServiceName() {
		return "StructService";
	}


	private int sendReceivePrimitives_required_size() {
		int op_size = 0;

		op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
		op_size = PrimitiveTypesStruct.getMaxCdrSerializedSize(op_size); // Return type

		return op_size;
	}

	private int sendReceiveStruct_required_size() {
		int op_size = 0;

		op_size += 4 + CDRSerializer.alignment(op_size, Integer.SIZE); // MessageID
		op_size = OuterStruct.getMaxCdrSerializedSize(op_size); // Return type

		return op_size;
	}

	public TransportMessage process(Serializer ser, Transport transport, TransportMessage message, Object messageId) {

		SerializerImpl serImpl;
        TransportImpl transportImpl;

        if (ser instanceof SerializerImpl && transport instanceof TransportImpl) {
            serImpl = (SerializerImpl) ser;
            transportImpl = (TransportImpl) transport;
        } else {
            return null; // TODO Raise error
        }

		String operation = serImpl.deserializeOperation(message);


		if (operation.equals("sendReceivePrimitives")) {
			PrimitiveTypesStruct value = null;
			try {
				value = serImpl.deserialize(message, "", PrimitiveTypesStruct.class);
			} catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			PrimitiveTypesStruct ret = sendReceivePrimitives (value);

			ByteBuffer retBuffer = ByteBuffer.allocate(sendReceivePrimitives_required_size());
		    TransportMessage retMsg = transportImpl.createTransportMessage(null);
		 	retMsg.setPayload(retBuffer);
		 	serImpl.serializeMessageId(retMsg, messageId);
			serImpl.serialize(retMsg, "", ret);
			retMsg.getPayload().flip();
			return retMsg;
		}

		if (operation.equals("sendReceiveStruct")) {
			OuterStruct value = null;
			try {
				value = serImpl.deserialize(message, "", OuterStruct.class);
			} catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			OuterStruct ret = sendReceiveStruct (value);

			ByteBuffer retBuffer = ByteBuffer.allocate(sendReceiveStruct_required_size());
		    TransportMessage retMsg = transportImpl.createTransportMessage(null);
		 	retMsg.setPayload(retBuffer);
		 	serImpl.serializeMessageId(retMsg, messageId);
			serImpl.serialize(retMsg, "", ret);
			retMsg.getPayload().flip();
			return retMsg;
		}

		return null;

	}




}
