 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file TestServiceExampleAsync.java
 * This file contains the main asynchronous interface for the defined operations.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */


package org.fiware.kiara.complextypes;

import org.fiware.kiara.transport.impl.TransportMessage;
import org.fiware.kiara.client.AsyncCallback;
import org.fiware.kiara.serialization.impl.SerializerImpl;

/**
 * Interface containing the asynchronous method definition.
 *
 * @author Kiaragen tool.
 *
 */
public interface TestServiceAsync {

	public void return_param_func(/*in*/ MyStruct param1, /*in*/ int param2, return_param_func_AsyncCallback callback);

	public static abstract class return_param_func_AsyncCallback implements AsyncCallback<MyStruct> {
		public void process(TransportMessage message, SerializerImpl ser) {
			try {
				final Object messageId = ser.deserializeMessageId(message);
				MyStruct result = ser.deserialize(message, "", MyStruct.class);
				onSuccess(result);
			} catch (Exception ex) {
				onFailure(ex);
			}
		}
	}

	public void only_param_func(/*in*/ MyStruct param1, only_param_func_AsyncCallback callback);

	public static abstract class only_param_func_AsyncCallback implements AsyncCallback<Void> {
		public void process(TransportMessage message, SerializerImpl ser) {
			try {
				final Object messageId = ser.deserializeMessageId(message);
				onSuccess(null);
			} catch (Exception ex) {
				onFailure(ex);
			}
		}
	}

	public void only_return_func(only_return_func_AsyncCallback callback);

	public static abstract class only_return_func_AsyncCallback implements AsyncCallback<MyStruct> {
		public void process(TransportMessage message, SerializerImpl ser) {
			try {
				final Object messageId = ser.deserializeMessageId(message);
				MyStruct result = ser.deserialize(message, "", MyStruct.class);
				onSuccess(result);
			} catch (Exception ex) {
				onFailure(ex);
			}
		}
	}





}
