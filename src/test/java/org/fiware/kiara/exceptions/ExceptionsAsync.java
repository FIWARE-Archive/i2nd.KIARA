 /* KIARA - Middleware for efficient and QoS/Security-aware invocation of services and exchange of messages
 *
 * Copyright (C) 2014 Proyectos y Sistemas de Mantenimiento S.L. (eProsima)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * @file ExceptionsExampleAsync.java
 * This file contains the main asynchronous interface for the defined operations.
 *
 * This file was generated by using the tool Kiaragen.
 *
 */
 
 
package org.fiware.kiara.exceptions;

import org.fiware.kiara.transport.impl.TransportMessage;
import org.fiware.kiara.client.AsyncCallback;
import org.fiware.kiara.serialization.impl.SerializerImpl;

/**
 * Interface containing the asynchronous method definition. 
 *
 * @author Kiaragen tool.
 *
 */
public interface ExceptionsAsync {

	public void divide(/*in*/ float n1, /*in*/ float n2, divide_AsyncCallback callback);

	public static abstract class divide_AsyncCallback implements AsyncCallback<Float> {
		public void process(TransportMessage message, SerializerImpl ser) {
			try {
				// Deserialize message ID
				final Object messageId = ser.deserializeMessageId(message);
				// Deserialize return code (0 = OK, anything else = WRONG)
	    		int retCode = ser.deserializeUI32(message, "");
	    		if (retCode == 0) { // Function execution was OK.
					float result = ser.deserializeFloat32(message, "");
					onSuccess(result);
				} 
				else {
					String name = ser.deserializeString(message, "");
					if (name.equals("DividedByZeroException")) {
						DividedByZeroException exception = new DividedByZeroException();
						exception.deserialize(ser, message, "");
						throw exception;
					}
				}
			} catch (Exception ex) {
				onFailure(ex);
			}
		}
	}

	public void function(function_AsyncCallback callback);

	public static abstract class function_AsyncCallback implements AsyncCallback<Integer> {
		public void process(TransportMessage message, SerializerImpl ser) {
			try {
				// Deserialize message ID
				final Object messageId = ser.deserializeMessageId(message);
				// Deserialize return code (0 = OK, anything else = WRONG)
	    		int retCode = ser.deserializeUI32(message, "");
	    		if (retCode == 0) { // Function execution was OK.
					int result = ser.deserializeI32(message, "");
					onSuccess(result);
				} 
				else {
					String name = ser.deserializeString(message, "");
					if (name.equals("FirstException")) {
						FirstException exception = new FirstException();
						exception.deserialize(ser, message, "");
						throw exception;
					}
					if (name.equals("SecondException")) {
						SecondException exception = new SecondException();
						exception.deserialize(ser, message, "");
						throw exception;
					}
				}
			} catch (Exception ex) {
				onFailure(ex);
			}
		}
	}

	
}
